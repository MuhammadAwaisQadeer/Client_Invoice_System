@page "/resources"
@rendermode InteractiveServer
@using Client_Invoice_System.Models
@using Client_Invoice_System.Repository
@inject NavigationManager Navigation
@inject ResourceRepository ResourceRepository
@inject EmployeeRepository EmployeeRepository
@inject ClientRepository ClientRepository
@inject IJSRuntime JS

<h3>Manage Contracts (@(ResourcesList?.Count ?? 0))</h3>
<div class="d-flex justify-content-end">
    <button class="btn btn-primary mb-3" @onclick="NavigateToAddResource">Add Contract</button>
</div>

@if (ResourcesList != null && ResourcesList.Any())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Client</th>
                <th>Resource Name</th>
                <th>Employee</th>
                <th>Consumed Hours</th>
                <th>Contract Status</th> @* New Column *@
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var resource in ResourcesList)
            {
                var contractStatus = GetContractStatus(resource.DueDate);
                var statusClass = contractStatus == "Active" ? "text-success fw-bold" : "text-danger fw-bold";

                <tr>
                    <td>@(resource.Client?.Name ?? "Unknown")</td>
                    <td>@resource.ResourceName</td>
                    <td>@(resource.Employee?.EmployeeName ?? "Unknown")</td>
                    <td>@resource.ConsumedTotalHours</td>
                    <td class="@statusClass">@contractStatus</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => NavigateToEditResource(resource.ResourceId)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDelete(resource.ResourceId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Loading...</p>
}
<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this contract?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteConfirmed">OK</button>
            </div>
        </div>
    </div>
</div>

@code {

    private List<Resource> ResourcesList = new();

    private int contractIdToDelete;

    protected override async Task OnInitializedAsync()
    {
        ResourcesList = (await ResourceRepository.GetAllAsync()).ToList();
        // Removed the loop that was resetting resource.Client
    }

    private string GetContractStatus(DateTime? dueDate)
    {
        if (!dueDate.HasValue || dueDate.Value == DateTime.MinValue)
            return "Unknown";
        return dueDate.Value >= DateTime.Today ? "Active" : "Ended";
    }

    private void NavigateToAddResource()
    {
        Navigation.NavigateTo("/add-edit-resource");
    }

    private void NavigateToEditResource(int resourceId)
    {
        Navigation.NavigateTo($"/add-edit-resource/{resourceId}");
    }
    private async Task ConfirmDelete(int id)
    {
        contractIdToDelete = id;
        await JS.InvokeVoidAsync("ShowDeleteModal");
    }
    private async Task DeleteConfirmed()
    {
        try
        {
            await ResourceRepository.DeleteAsync(contractIdToDelete);
            ResourcesList = (await ResourceRepository.GetAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting client: {ex.Message}");
        }
        finally
        {
            JS.InvokeVoidAsync("HideDeleteModal");
        }
    }
}
