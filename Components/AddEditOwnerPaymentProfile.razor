@page "/add-edit-owner-payment-profile/{PaymentProfileId:int?}"
@rendermode InteractiveServer
@using Client_Invoice_System.Models
@using Client_Invoice_System.Repositories
@using Client_Invoice_System.Repository
@inject OwnerPaymentProfileRepository OwnerPaymentProfileRepository
@inject OwnerRepository OwnerRepository
@inject NavigationManager Navigation

<h3>@(IsEditMode ? "Edit" : "Add") Owner Payment Profile</h3>

@if (paymentProfile != null)
{
    <div class="card p-4">
        <div class="mb-3">
            <label class="form-label">Select Owner</label>
            <select class="form-control" @bind="paymentProfile.OwnerId">
                <option value="">-- Select Owner --</option>
                @foreach (var owner in OwnersList)
                {
                    <option value="@owner.Id">@owner.OwnerName</option>
                }
            </select>
        </div>

        <div class="mb-3">
            <label class="form-label">IBAN Number</label>
            <input type="text" class="form-control" @bind="paymentProfile.IBANNumber" />
        </div>
        <div class="mb-3">
            <label class="form-label">Currency</label>
            <input type="text" class="form-control" @bind="paymentProfile.Currency" />
        </div>
        <div class="mb-3">
            <label class="form-label">Account Title</label>
            <input type="text" class="form-control" @bind="paymentProfile.AccountTitle" />
        </div>
        <div class="mb-3">
            <label class="form-label">Account Number</label>
            <input type="text" class="form-control" @bind="paymentProfile.AccountNumber" />
        </div>

        <div class="d-flex justify-content-end gap-2">
            <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            <button class="btn btn-primary" @onclick="SavePaymentProfile">Save</button>
        </div>
    </div>
}
else
{
    <p>Loading...</p>
}

@code {
    private PaymentProfile paymentProfile = new();
    private List<OwnerProfile> OwnersList = new();
    private bool IsEditMode = false;

    [Parameter] public int? PaymentProfileId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            OwnersList = (await OwnerRepository.GetAllOwnersAsync()).ToList();

            if (PaymentProfileId.HasValue && PaymentProfileId.Value > 0)
            {
                paymentProfile = await OwnerPaymentProfileRepository.GetByIdAsync(PaymentProfileId.Value);
                if (paymentProfile == null)
                {
                    Navigation.NavigateTo("/owner-payment-profiles");
                    return;
                }
                IsEditMode = true;
            }
            else
            {
                paymentProfile = new PaymentProfile();
                IsEditMode = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing payment profile page: {ex.Message}");
        }
    }

    private async Task SavePaymentProfile()
    {
        try
        {
            if (paymentProfile.OwnerId == 0)
            {
                Console.WriteLine("Please select an Owner.");
                return;
            }

            if (IsEditMode)
                await OwnerPaymentProfileRepository.UpdateAsync(paymentProfile);
            else
                await OwnerPaymentProfileRepository.AddAsync(paymentProfile);

            Navigation.NavigateTo("/owner-payment-profiles");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving payment profile: {ex.Message}");
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/owner-payment-profiles");
    }
}
