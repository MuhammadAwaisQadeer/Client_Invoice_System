@page "/owner-profile"
@rendermode InteractiveServer
@using Client_Invoice_System.Models
@using Client_Invoice_System.Repositories
@using Client_Invoice_System.Repository
@inject OwnerRepository OwnerRepository
@inject NavigationManager Navigation

<h3 class="text-primary">Owner Profiles</h3>

<div class="d-flex justify-content-end mb-3">
    <button class="btn btn-primary" @onclick="AddOwnerProfile">Add New Owner Profile</button>
</div>

@if (Owners != null && Owners.Any())
{
    <table class="table table-striped">
        <thead >
            <tr>
                <th>Owner Name</th>
                <th>Billing Email</th>
                <th>Phone Number</th>
                <th>Billing Address</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var owner in Owners)
            {
                <tr>
                    <td>@owner.OwnerName</td>
                    <td>@owner.BillingEmail</td>
                    <td>@owner.PhoneNumber</td>
                    <td>@owner.BillingAddress</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => EditOwnerProfile(owner.Id)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteOwnerProfile(owner.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p class="text-muted text-center">No owner profiles found.</p>
}

@code {
    private List<OwnerProfile> Owners = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Owners = (await OwnerRepository.GetAllOwnerProfilesAsync()).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading owner profiles: {ex.Message}");
        }
    }

    private void AddOwnerProfile()
    {
        Navigation.NavigateTo("/add-owner-profile");
    }

    private void EditOwnerProfile(int ownerId)
    {
        Navigation.NavigateTo($"/edit-owner-profile/{ownerId}");
    }

    private async Task DeleteOwnerProfile(int ownerId)
    {
        try
        {
            await OwnerRepository.DeleteOwnerProfileAsync(ownerId);
            Owners = (await OwnerRepository.GetAllOwnerProfilesAsync()).ToList(); // Refresh list
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting owner profile: {ex.Message}");
        }
    }
}
