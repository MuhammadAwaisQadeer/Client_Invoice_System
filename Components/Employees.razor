@page "/employees"
@rendermode InteractiveServer
@using Client_Invoice_System.Models
@using Client_Invoice_System.Repositories
@using System.Globalization
@using Client_Invoice_System.Repository
@inject EmployeeRepository EmployeeRepository
@inject NavigationManager Navigation
@inject IJSRuntime JS

<div class="container">
    <div class="row">
        <div class="col-md-12">
            <h3>Employees (@(employees?.Count ?? 0))</h3>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 d-flex justify-content-end">
            <button class="btn btn-primary mb-3" @onclick="NavigateToAddEmployee">Add Employee</button>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Employee ID</th>
                            <th>Name</th>
                            <th>Designation</th>
                            <th>Hourly Rate</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var employee in employees)
                        {
                            <tr>
                                <td>@employee.EmployeeId</td>
                                <td>@employee.EmployeeName</td>
                                <td>@employee.Designation</td>
                                <td>@employee.HourlyRate.ToString("C", new CultureInfo("en-US"))</td>
                                <td>
                                    <button class="btn btn-sm btn-warning" @onclick="() => NavigateToEditEmployee(employee.EmployeeId)">Edit</button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(employee.EmployeeId)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this employee?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteConfirmed">OK</button>
            </div>
        </div>
    </div>
</div>
@code {

    private List<Employee> employees = new();

    private int employeeIdToDelete;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            employees = (await EmployeeRepository.GetAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading employees: {ex.Message}");
        }
    }

    private void NavigateToAddEmployee()
    {
        Navigation.NavigateTo("/add-edit-employee");
    }

    private void NavigateToEditEmployee(int employeeId)
    {
        Navigation.NavigateTo($"/add-edit-employee/{employeeId}");
    }

    private async Task DeleteEmployee(int employeeId)
    {
        try
        {
            await EmployeeRepository.DeleteAsync(employeeId);
            employees = (await EmployeeRepository.GetAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting employee: {ex.Message}");
        }
    }

    private async Task ConfirmDelete(int id)
    {
        employeeIdToDelete = id;
        await JS.InvokeVoidAsync("ShowDeleteModal");
    }
    private async Task DeleteConfirmed()
    {
        try
        {
            await EmployeeRepository.DeleteAsync(employeeIdToDelete);
            employees = (await EmployeeRepository.GetAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting client: {ex.Message}");
        }
        finally
        {
            JS.InvokeVoidAsync("HideDeleteModal");
        }
    }
}
