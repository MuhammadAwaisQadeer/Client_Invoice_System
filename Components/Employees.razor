@page "/employees"
@rendermode InteractiveServer
@using Client_Invoice_System.Models
@using Client_Invoice_System.Repositories
@using System.Globalization
@using Client_Invoice_System.Repository
@inject EmployeeRepository EmployeeRepository
@inject NavigationManager Navigation

<h3>Employees (@(employees?.Count ?? 0))</h3>
<div class="d-flex justify-content-end">
    <button class="btn btn-primary mb-3" @onclick="NavigateToAddEmployee">Add Employee</button>
</div>

@if (employees != null && employees.Any())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Employee ID</th>
                <th>Name</th>
                <th>Designation</th>
                <th>Hourly Rate</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in employees)
            {
                <tr>
                    <td>@employee.EmployeeId</td>
                    <td>@employee.EmployeeName</td>
                    <td>@employee.Designation</td>
                    <td>@employee.HourlyRate.ToString("C", new CultureInfo("en-US"))</td>
                    <td>
                        <button class="btn btn-sm btn-warning" @onclick="() => NavigateToEditEmployee(employee.EmployeeId)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteEmployee(employee.EmployeeId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No employees found.</p>
}
@code {
    private List<Employee> employees = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            employees = (await EmployeeRepository.GetAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading employees: {ex.Message}");
        }
    }

    private void NavigateToAddEmployee()
    {
        Navigation.NavigateTo("/add-edit-employee");
    }

    private void NavigateToEditEmployee(int employeeId)
    {
        Navigation.NavigateTo($"/add-edit-employee/{employeeId}");
    }

    private async Task DeleteEmployee(int employeeId)
    {
        try
        {
            await EmployeeRepository.DeleteAsync(employeeId);
            employees = (await EmployeeRepository.GetAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting employee: {ex.Message}");
        }
    }
}
