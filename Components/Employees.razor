@page "/employees"
@rendermode InteractiveServer
@using Client_Invoice_System.Models
@using Client_Invoice_System.Repositories
@using System.Globalization
@using Client_Invoice_System.Repository
@inject EmployeeRepository EmployeeRepository
@inject NavigationManager Navigation

 <div class="row">
        <div class="col-md-12">
            <h3>Employees (@(employees?.Count ?? 0))</h3>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 d-flex justify-content-end">
            <button class="btn btn-primary mb-3" @onclick="NavigateToAddEmployee">Add Employee</button>
        </div>
    </div>

@if (employees != null && employees.Any())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Designation</th>
                <th>Hourly Rate</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in employees)
            {
                <tr>
                    <td>@employee.EmployeeName</td>
                    <td>@employee.Designation</td>
                    <td>@employee.HourlyRate.ToString("C", new CultureInfo("en-US"))</td>
                    <td>
                        <button class="btn btn-sm btn-warning" @onclick="() => NavigateToEditEmployee(employee.EmployeeId)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => ShowDeleteModal(employee.EmployeeId, employee.EmployeeName)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No employees found.</p>
}

<!-- Delete Confirmation Modal -->
@if (isDeleteModalVisible)
{
    <div class="modal-overlay">
        <div class="delete-modal">
            <p class="fw-bold">Are you sure you want to delete <span class="text-danger">@employeeToDeleteName</span>?</p>
            <div class="d-flex justify-content-center gap-3">
                <button class="btn btn-danger" @onclick="ConfirmDelete">Yes, Delete</button>
                <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
            </div>
        </div>
    </div>
}

<style>
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        background: transparent;
        z-index: 1050;
    }

    .delete-modal {
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        text-align: center;
        max-width: 400px;
    }
</style>

@code {
    private List<Employee> employees = new();
    private bool isDeleteModalVisible = false;
    private int employeeToDelete;
    private string employeeToDeleteName;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            employees = (await EmployeeRepository.GetAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading employees: {ex.Message}");
        }
    }

    private void NavigateToAddEmployee()
    {
        Navigation.NavigateTo("/add-edit-employee");
    }

    private void NavigateToEditEmployee(int employeeId)
    {
        Navigation.NavigateTo($"/add-edit-employee/{employeeId}");
    }

    private void ShowDeleteModal(int employeeId, string name)
    {
        employeeToDelete = employeeId;
        employeeToDeleteName = name;
        isDeleteModalVisible = true;
    }

    private void CancelDelete()
    {
        isDeleteModalVisible = false;
    }

    private async Task ConfirmDelete()
    {
        try
        {
            await EmployeeRepository.DeleteAsync(employeeToDelete);
            employees = (await EmployeeRepository.GetAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting employee: {ex.Message}");
        }
        finally
        {
            isDeleteModalVisible = false;
        }
    }
}
