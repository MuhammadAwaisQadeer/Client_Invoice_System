@page "/"
@rendermode InteractiveServer
@using Client_Invoice_System.Models
@using Client_Invoice_System.Repositories
@using Client_Invoice_System.Repository
@inject ClientRepository ClientRepo
@inject InvoiceRepository InvoiceRepo

<div class="container">
    <div class="dashboard-header text-center mt-4">
        <h1 class="dashboard-title">📊 Dashboard Overview</h1>
        <hr>
    </div>

    <!-- Filter Section -->
    <div class="row filter-section mb-4 p-3">
        <div class="col-md-4 mb-3">
            <label for="dateFilter">Select Date:</label>
            <input type="date" class="form-control" @bind="SelectedDate" @bind:event="oninput">
        </div>

        <div class="col-md-4 mb-3">
            <label for="monthFilter">Select Month:</label>
            <select class="form-select" @bind="SelectedMonth" @bind:event="onchange">
                <option value="">All</option>
                @for (int i = 1; i <= 12; i++)
                {
                    <option value="@i">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(i)</option>
                }
            </select>
        </div>

        <div class="col-md-4 mb-3">
            <label for="clientFilter">Select Client:</label>
            <select class="form-select" @bind="SelectedClientId" @bind:event="onchange">
                <option value="">All</option>
                @foreach (var client in Clients)
                {
                    <option value="@client.ClientId">@client.Name</option>
                }
            </select>
        </div>

        <div class="col-md-4 mt-3 d-flex justify-content-center mb-5">
            <button class="btn btn-primary w-100" @onclick="ApplyFilters">Apply Filters</button>
        </div>
    </div>

    <!-- Dashboard Cards -->
    <div class="row row-cols-1 row-cols-md-5 g-4 mt-5">
        @foreach (var card in DashboardCards)
        {
            <div class="col">
                <div class="card @card.BackgroundClass order-card">
                    <div class="card-body text-center">
                        <i class="@card.Icon icon-style"></i>
                        <h6>@card.Title</h6>
                        <h2>@card.Value</h2>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private DateTime? SelectedDate;
    private int? SelectedMonth;
    private int? SelectedClientId;
    private List<Client> Clients = new();
    private List<DashboardCard> DashboardCards = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadClients();
        await LoadDashboardData();
    }

    private async Task LoadClients()
    {
        Clients = await ClientRepo.GetAllClientsWithDetailsAsync();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            var invoices = await InvoiceRepo.GetFilteredInvoicesAsync(SelectedDate, SelectedMonth, SelectedClientId);
            var totalRevenue = invoices.Where(i => i.IsPaid).Sum(i => i.TotalAmount);
            var unpaidInvoices = invoices.Where(i => !i.IsPaid).Sum(i => i.TotalAmount);
            // var overdueInvoices = invoices.Count(i => !i.IsPaid && i.DueDate < DateTime.UtcNow);
            var activeClients = await ClientRepo.GetActiveClientsCountAsync();
            var totalEmployees = 10; // Replace with actual employee repository method

            UpdateDashboardCards(totalRevenue, unpaidInvoices, activeClients, totalEmployees);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error fetching dashboard data: {ex.Message}");
        }
    }

    private async Task ApplyFilters()
    {
        await LoadDashboardData();
        StateHasChanged();
    }

    private void UpdateDashboardCards(decimal totalRevenue, decimal unpaidInvoices, int activeClients, int totalEmployees)
    {
        DashboardCards = new()
        {
            new DashboardCard("Total Revenue", totalRevenue.ToString("C"), "bi bi-cash-coin", "bg-c-blue"),
            new DashboardCard("Unpaid Invoices", unpaidInvoices.ToString("C"), "bi bi-exclamation-triangle-fill", "bg-c-green"),
            // new DashboardCard("Overdue Invoices", overdueInvoices.ToString(), "bi bi-alarm", "bg-c-red"),
            new DashboardCard("Active Clients", activeClients.ToString(), "bi bi-people-fill", "bg-c-purple"),
            new DashboardCard("Total Employees", totalEmployees.ToString(), "bi bi-person-badge", "bg-c-orange")
        };

        StateHasChanged();
    }

    private class DashboardCard
    {
        public string Title { get; }
        public string Value { get; }
        public string Icon { get; }
        public string BackgroundClass { get; }

        public DashboardCard(string title, string value, string icon, string backgroundClass)
        {
            Title = title;
            Value = value;
            Icon = icon;
            BackgroundClass = backgroundClass;
        }
    }
}
